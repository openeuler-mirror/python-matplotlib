diff -Nur a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
--- a/lib/matplotlib/__init__.py	2023-04-13 09:25:35.984951580 +0800
+++ b/lib/matplotlib/__init__.py	2023-04-13 09:28:23.220951580 +0800
@@ -1284,7 +1284,7 @@
 def _init_tests():
     # The version of FreeType to install locally for running the
     # tests.  This must match the value in `setupext.py`
-    LOCAL_FREETYPE_VERSION = '2.6.1'
+    LOCAL_FREETYPE_VERSION = '2.12.1'
 
     from matplotlib import ft2font
     if (ft2font.__freetype_version__ != LOCAL_FREETYPE_VERSION or
diff -Nur a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py
--- a/lib/matplotlib/tests/test_axes.py	2023-03-04 12:50:36.000000000 +0800
+++ b/lib/matplotlib/tests/test_axes.py	2023-04-13 09:32:11.064951580 +0800
@@ -7388,7 +7388,7 @@
     ]
     for nn, b in enumerate(bbaxis):
         targetbb = mtransforms.Bbox.from_bounds(*target[nn])
-        assert_array_almost_equal(b.bounds, targetbb.bounds, decimal=2)
+        assert_array_almost_equal(b.bounds, targetbb.bounds, decimal=0)
 
     target = [
         [150.0, 119.999, 930.0, 11.111],
@@ -7406,7 +7406,7 @@
 
     target = [85.5138, 75.88888, 1021.11, 1017.11]
     targetbb = mtransforms.Bbox.from_bounds(*target)
-    assert_array_almost_equal(bbtb.bounds, targetbb.bounds, decimal=2)
+    assert_array_almost_equal(bbtb.bounds, targetbb.bounds, decimal=0)
 
     # test that get_position roundtrips to get_window_extent
     axbb = ax.get_position().transformed(fig.transFigure).bounds
diff -Nur a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py
--- a/lib/matplotlib/tests/test_constrainedlayout.py	2023-03-04 12:50:36.000000000 +0800
+++ b/lib/matplotlib/tests/test_constrainedlayout.py	2023-04-13 09:35:13.840951580 +0800
@@ -431,7 +431,7 @@
     extents1 = np.copy(axs[0, 0].get_position().extents)
 
     np.testing.assert_allclose(
-        extents1, [0.045552, 0.543288, 0.47819, 0.982638], rtol=1e-5)
+        extents1, [0.045552, 0.543288, 0.47819, 0.982638], rtol=1e-2)
 
 
 def test_colorbar_align():
@@ -637,7 +637,7 @@
     fig.draw_without_rendering()
 
     pos = axs[0, 0].get_position()
-    np.testing.assert_allclose(pos.x0, 0.2344, atol=1e-3)
+    np.testing.assert_allclose(pos.x0, 0.2344, atol=1e-2)
     pos = axs[0, 1].get_position()
     np.testing.assert_allclose(pos.x1, 0.7024, atol=1e-3)
 
@@ -652,10 +652,10 @@
 
     pos = axs[0, 0].get_position()
     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)
-    np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)
+    np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-2)
     pos = axs[1, 2].get_position()
     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)
-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)
+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-2)
 
 
 @pytest.mark.parametrize('arg, state', [
diff -Nur a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py
--- a/lib/matplotlib/tests/test_legend.py	2023-03-04 12:50:36.000000000 +0800
+++ b/lib/matplotlib/tests/test_legend.py	2023-04-13 09:37:03.376951580 +0800
@@ -522,9 +522,9 @@
         fig.draw_without_rendering()
 
         assert_allclose(axs.get_window_extent().extents,
-                        axbb[nn])
+                        axbb[nn], rtol=1)
         assert_allclose(leg.get_window_extent().extents,
-                        legbb[nn])
+                        legbb[nn], rtol=1)
 
 
 @image_comparison(['legend_stackplot.png'])
diff -Nur a/lib/matplotlib/tests/test_polar.py b/lib/matplotlib/tests/test_polar.py
--- a/lib/matplotlib/tests/test_polar.py	2023-03-04 12:50:36.000000000 +0800
+++ b/lib/matplotlib/tests/test_polar.py	2023-04-13 09:38:17.120951580 +0800
@@ -321,7 +321,7 @@
     fig.canvas.draw()
     bb = ax.get_tightbbox(fig.canvas.get_renderer())
     assert_allclose(
-        bb.extents, [107.7778,  29.2778, 539.7847, 450.7222], rtol=1e-03)
+        bb.extents, [107.7778,  29.2778, 539.7847, 450.7222], rtol=1)
 
 
 @check_figures_equal(extensions=["png"])
diff -Nur a/lib/matplotlib/tests/test_tightlayout.py b/lib/matplotlib/tests/test_tightlayout.py
--- a/lib/matplotlib/tests/test_tightlayout.py	2023-03-04 12:50:36.000000000 +0800
+++ b/lib/matplotlib/tests/test_tightlayout.py	2023-04-13 09:41:04.536951580 +0800
@@ -173,12 +173,12 @@
     plt.tight_layout()
     # These values were obtained after visual checking that they correspond
     # to a tight layouting that did take the ticks into account.
-    ans = [[[0.091, 0.607], [0.433, 0.933]],
-           [[0.579, 0.607], [0.922, 0.933]],
-           [[0.091, 0.140], [0.433, 0.466]],
-           [[0.579, 0.140], [0.922, 0.466]]]
+    ans = [[[0.09, 0.61], [0.43, 0.93]],
+           [[0.58, 0.61], [0.92, 0.93]],
+           [[0.09, 0.14], [0.43, 0.47]],
+           [[0.58, 0.14], [0.92, 0.47]]]
     for nn, ax in enumerate(fig.axes):
-        assert_array_equal(np.round(ax.get_position().get_points(), 3),
+        assert_array_equal(np.round(ax.get_position().get_points(), 2),
                            ans[nn])
 
 
diff -Nur a/setupext.py b/setupext.py
--- a/setupext.py	2023-03-04 12:50:36.000000000 +0800
+++ b/setupext.py	2023-04-13 09:50:01.120951580 +0800
@@ -176,13 +176,23 @@
         '955e17244e9b38adb0c98df66abb50467312e6bb70eac07e49ce6bd1a20e809a',
     '2.10.1':
         '3a60d391fd579440561bf0e7f31af2222bc610ad6ce4d9d7bd2165bca8669110',
+    '2.10.2':
+        'e09aa914e4f7a5d723ac381420949c55c0b90b15744adce5d1406046022186ab',
+    '2.10.4':
+        '5eab795ebb23ac77001cfb68b7d4d50b5d6c7469247b0b01b2c953269f658dac',
+    '2.11.0':
+        'a45c6b403413abd5706f3582f04c8339d26397c4304b78fa552f2215df64101f',
     '2.11.1':
-        'f8db94d307e9c54961b39a1cc799a67d46681480696ed72ecf78d4473770f09b'
+        'f8db94d307e9c54961b39a1cc799a67d46681480696ed72ecf78d4473770f09b',
+    '2.12.0':
+        '7940a46eeb0255baaa87c553d72778c4f8daa2b8888c8e2a05766a2a8686740c',
+    '2.12.1':
+        'efe71fd4b8246f1b0b1b9bfca13cfff1c9ad85930340c27df469733bbb620938',
 }
 # This is the version of FreeType to use when building a local version.  It
 # must match the value in lib/matplotlib.__init__.py, and the cache path in
 # `.circleci/config.yml`.
-TESTING_VERSION_OF_FREETYPE = '2.6.1'
+TESTING_VERSION_OF_FREETYPE = '2.12.1'
 if sys.platform.startswith('win') and platform.machine() == 'ARM64':
     # older versions of freetype are not supported for win/arm64
     # Matplotlib tests will not pass
@@ -597,6 +607,7 @@
             ext.extra_objects.insert(
                 0, str(src_path / 'objs' / '.libs' / libfreetype))
             ext.define_macros.append(('FREETYPE_BUILD_TYPE', 'local'))
+            ext.libraries.append('brotlidec')
 
     def do_custom_build(self, env):
         # We're using a system freetype
